<?xml version="1.0" encoding="utf-8" ?>
<ContentPage
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:vm="clr-namespace:KokoroIO.XamarinForms.ViewModels"
    xmlns:v="clr-namespace:KokoroIO.XamarinForms.Views"
    xmlns:xlabs="clr-namespace:XLabs.Forms.Controls;assembly=XLabs.Forms"
    x:Class="KokoroIO.XamarinForms.Views.MessagesPage"
    Title="{Binding Title}"
    x:DataType="vm:MessagesViewModel">
    <ContentPage.Resources>
        <Style
            x:Key="bannerButtonStyle"
            TargetType="Button">
            <Setter
                Property="Margin"
                Value="8,4" />
            <Setter
                Property="VerticalOptions"
                Value="Start" />
            <Setter
                Property="HorizontalOptions"
                Value="FillAndExpand" />
            <Setter
                Property="FontSize"
                Value="Small" />
            <Setter
                Property="BorderWidth"
                Value="0" />
            <Setter
                Property="BorderRadius"
                Value="5" />
            <Setter
                Property="TextColor"
                Value="#fff" />
        </Style>
        <Style
            x:Key="footerButtonStyle"
            TargetType="Button">
            <Setter
                Property="FontFamily"
                Value="zmdi" />
            <Setter
                Property="BackgroundColor"
                Value="Transparent" />
            <Setter
                Property="BorderColor"
                Value="Transparent" />
            <Setter
                Property="Margin"
                Value="0" />
            <Setter
                Property="Padding"
                Value="0" />
            <Setter
                Property="BorderWidth"
                Value="0" />
            <Setter
                Property="FontSize"
                Value="24" />
            <Setter
                Property="WidthRequest"
                Value="48" />
            <Setter
                Property="HeightRequest"
                Value="24" />
        </Style>
    </ContentPage.Resources>
    <ContentPage.ToolbarItems>
        <ToolbarItem
            Order="Secondary"
            Text="Refresh"
            Command="{Binding RefreshCommand}" />
        <ToolbarItem
            Order="Secondary"
            Command="{Binding Channel.ToggleNotificationCommand}">
            <ToolbarItem.Text>
                <Binding
                    Path="Channel.NotificationDisabled">
                    <Binding.Converter>
                        <v:ConditionalConverter
                            x:TypeArguments="sys:String"
                            True="Notifications disabled"
                            False="Notifications enabled" />
                    </Binding.Converter>
                </Binding>
            </ToolbarItem.Text>
            <ToolbarItem.Icon>
                <Binding
                    Path="Channel.NotificationDisabled">
                    <Binding.Converter>
                        <v:ConditionalConverter
                            x:TypeArguments="FileImageSource"
                            True="notifications_off.png"
                            False="notifications.png" />
                    </Binding.Converter>
                </Binding>
            </ToolbarItem.Icon>
        </ToolbarItem>
        <ToolbarItem
            Order="Secondary"
            Text="Members"
            Command="{Binding ShowChannelCommand}" />
        <ToolbarItem
            Order="Secondary"
            Text="Invite member [WIP]" />
        <ToolbarItem
            Order="Secondary"
            Text="Search message [WIP]" />
        <ToolbarItem
            Order="Secondary"
            Text="Leave channel [WIP]" />
    </ContentPage.ToolbarItems>
    <Grid
        x:DataType="vm:MessagesViewModel">
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition
                Height="Auto" />
            <RowDefinition
                Height="Auto" />
        </Grid.RowDefinitions>
        <v:MessagesView
            LoadOlderCommand="{Binding PrependCommand}"
            RefreshCommand="{Binding AppendCommand}"
            NavigatingCommand="{Binding OpenUrlCommand}"
            Messages="{Binding Messages}"
            SelectedMessage="{Binding SelectedMessage}"
            HasUnread="{Binding Channel.HasUnread}" />
        <StackLayout
            HorizontalOptions="FillAndExpand"
            VerticalOptions="Start">
            <Button
                Style="{StaticResource bannerButtonStyle}"
                BackgroundColor="#4169E1"
                Text="{Binding Channel.UnreadCount,StringFormat='{}{0} new messages'}"
                Command="{Binding ShowUnreadCommand}">
                <Button.Triggers>
                    <DataTrigger
                        TargetType="Button"
                        Binding="{Binding Channel.UnreadCount}"
                        Value="0">
                        <Setter
                            Property="IsVisible"
                            Value="False" />
                    </DataTrigger>
                </Button.Triggers>
            </Button>
            <Button
                Style="{StaticResource bannerButtonStyle}"
                Text="Archived channel"
                BackgroundColor="DarkOrange"
                IsVisible="{Binding IsArchiveBannerShown}"
                Command="{Binding ClearArchiveBannerCommand}" />
            <Button
                Style="{StaticResource bannerButtonStyle}"
                Text="Disconnected from server"
                BackgroundColor="Khaki"
                IsVisible="{Binding Application.IsDisconnected}"
                Command="{Binding Application.ConnectCommand}" />
        </StackLayout>
        <ActivityIndicator
            VerticalOptions="Center"
            HorizontalOptions="Fill"
            IsRunning="{Binding IsBusy}"
            IsVisible="{Binding IsBusy}" />

        <Grid
            Grid.Row="1"
            HeightRequest="32"
            IsVisible="{Binding CanPost}">

            <StackLayout
                Orientation="Horizontal">

                <StackLayout.Triggers>
                    <DataTrigger
                        TargetType="StackLayout"
                        Binding="{Binding ProfileCandicates.HasResult}"
                        Value="True">
                        <Setter
                            Property="IsVisible"
                            Value="False" />
                    </DataTrigger>
                    <DataTrigger
                        TargetType="StackLayout"
                        Binding="{Binding ChannelCandicates.HasResult}"
                        Value="True">
                        <Setter
                            Property="IsVisible"
                            Value="False" />
                    </DataTrigger>
                </StackLayout.Triggers>
                <Button
                    Style="{StaticResource footerButtonStyle}"
                    Text="{x:Static v:Zmdi.ImageOutline}"
                    Command="{Binding UploadImageCommand}"
                    IsVisible="{Binding SupportsImageUpload}" />
                <Button
                    Style="{StaticResource footerButtonStyle}"
                    Text="{x:Static v:Zmdi.Camera}"
                    Command="{Binding TakePhotoCommand}"
                    IsVisible="{Binding SupportsTakePhoto}" />
                <Button
                    Style="{StaticResource footerButtonStyle}"
                    Text="{x:Static v:Zmdi.TimeRestore}"
                    Command="{Binding ShowImageHistoryCommand}" />
                <Button
                    Style="{StaticResource footerButtonStyle}"
                    Text="{x:Static v:Zmdi.Eye}"
                    Command="{Binding ToggleNsfwCommand}">
                    <Button.Triggers>
                        <DataTrigger
                            TargetType="Button"
                            Binding="{Binding IsNsfw}"
                            Value="True">
                            <Setter
                                Property="Text"
                                Value="{x:Static v:Zmdi.EyeOff}" />
                        </DataTrigger>
                    </Button.Triggers>
                </Button>
                <Button
                    Style="{StaticResource footerButtonStyle}"
                    Text="{x:Static v:Zmdi.LayerOff}"
                    Command="{Binding ToggleExpandsContentsCommand}">
                    <Button.Triggers>
                        <DataTrigger
                            TargetType="Button"
                            Binding="{Binding ExpandsContents}"
                            Value="True">
                            <Setter
                                Property="Text"
                                Value="{x:Static v:Zmdi.Layer}" />
                        </DataTrigger>
                    </Button.Triggers>
                </Button>

            </StackLayout>

            <v:MembersLabel
                LineBreakMode="NoWrap"
                VerticalTextAlignment="Center"
                IsVisible="{Binding ProfileCandicates.HasResult}"
                Entities="{Binding ProfileCandicates.Result}"
                SelectCommand="{Binding  ProfileCandicates.SelectCommand}" />

            <v:ChannelsLabel
                LineBreakMode="NoWrap"
                VerticalTextAlignment="Center"
                IsVisible="{Binding ChannelCandicates.HasResult}"
                Entities="{Binding ChannelCandicates.Result}"
                SelectCommand="{Binding  ChannelCandicates.SelectCommand}" />
        </Grid>

        <Grid
            Grid.Row="2"
            Margin="4"
            IsVisible="{Binding CanPost}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition
                    Width="Auto" />
            </Grid.ColumnDefinitions>
            <v:ExpandableEditor
                x:Name="editor"
                FontSize="Small"
                HorizontalOptions="FillAndExpand"
                Text="{Binding NewMessage}"
                Placeholder="{Binding Channel.Placeholder}"
                SelectionStart="{Binding SelectionStart}"
                SelectionLength="{Binding SelectionLength}"
                MaxLines="10"
                HasFocus="{Binding NewMessageFocused, Mode=TwoWay}"
                PostCommand="{Binding PostCommand}"
                FilePasted="ExpandableEditor_FilePasted"
                Unfocused="ExpandableEditor_Unfocused" />
            <Button
                Grid.Column="1"
                Style="{StaticResource footerButtonStyle}"
                Text="{x:Static v:Zmdi.MailSend}"
                VerticalOptions="End"
                Margin="0,4"
                Command="{Binding PostCommand}" />
        </Grid>

        <v:MessagesPageProfile
            Grid.RowSpan="3" />
        <v:MessagesPageImageHistory
            Grid.RowSpan="3" />
        <v:CommandListPopup
            Grid.RowSpan="3" />

        <!--TODO: support dedicated contents <xlabs:PopupLayout
                x:Name="webViewPopup"
                Grid.RowSpan="3"
                BackgroundColor="#80000000"
                IsVisible="False">
                <xlabs:PopupLayout.GestureRecognizers>
                    <TapGestureRecognizer
                        Command="{Binding ClearPopupCommand}" />
                </xlabs:PopupLayout.GestureRecognizers>
                <xlabs:PopupLayout.Content>
                    <WebView
                        x:Name="popupWebView"
                        VerticalOptions="Center"
                        HorizontalOptions="Center"
                        BindingContext="{Binding PopupUrl}"
                        BindingContextChanged="PopupWebView_BindingContextChanged" />
                </xlabs:PopupLayout.Content>
            </xlabs:PopupLayout>-->
    </Grid>
</ContentPage>